<?php

namespace api\controllers;

use api\transformers\AnnounceList;
use api\transformers\CategoryList;
use api\transformers\MetaData;
use common\components\SmsService;
use common\models\Product;
use common\models\User;
use common\models\UserFavorite;
use Yii;
use yii\data\Pagination;
use yii\filters\auth\HttpBasicAuth;

class FavoriteController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {


        $smsService = new SmsService();
        return [
            'authenticator' => [
                'class' => HttpBasicAuth::className(),
                'auth' => function ($username, $password) use ($smsService) {
                    if ($smsService->isUzPhone($smsService->clearPhone($username))) {
                        $username = $smsService->clearPhone($username);
                    }
                    $user = User::findByUsername($username);
                    if (!$user) return null;
                    $check = $user->validatePassword($password);
                    return $check ? $user : null;
                }
            ]
//            'verbs' => [
//                'class' => VerbFilter::className(),
//                'actions' => [
//                    'purchase-delete' => ['post'],
//                ],
//            ],
        ];
    }

    public function actionGetIds()
    {
        $prod_ids = [];
        $favs = UserFavorite::find()->where(['user_id' => Yii::$app->user->id])->orderBy('`created_at` DESC')->all();
        if ($favs) {
            foreach ($favs as $fav) {
                $prod_ids[] = $fav->product_id;
            }
        }
        return $this->asJson([
            'data' => $prod_ids
        ]);
    }

    public function actionShow()
    {
        $category = !empty(Yii::$app->request->get('cat_id')) ? Yii::$app->request->get('cat_id') : false;

        $currency = Yii::$app->request->get('currency', 'uzs');
        $all_cats = [];
        $products = [];
        $prod_ids = [];

        if (Yii::$app->user->id) {
            $prod_ids = UserFavorite::find()->where(['user_id' => Yii::$app->user->id])->orderBy('`created_at` DESC')->all();
        }
        if (!empty($prod_ids)) {
            for ($i = 0; $i < count($prod_ids); $i++) {
                $temp_prod = Product::findOne(['id' => $prod_ids[$i]->product_id, 'status' => 1]);
                if (Yii::$app->session->get('currency', 'uzs') == 'usd') {
                    $temp_prod->price = $temp_prod->price_usd;
                    $temp_prod->wholesale = $temp_prod->wholesale_usd;
                }
                if (!empty($temp_prod)) {
                    if ($temp_prod->shop_id) {
                        if (!$temp_prod->shop->status) continue;
                    }
                    if ($temp_prod->user_id) {
                        if ($temp_prod->user->status != 10) continue;
                    }
                    if ($temp_prod->category->status == 0) continue;
                    $temp_parent = $temp_prod->category;
                    while ($temp_parent) {
                        if (!$temp_parent->status) {
                            break;
                        }
                        if (empty($temp_parent->parent)) {
                            $all_cats[$temp_parent->id] = $temp_parent;
                            break;
                        }
                        $temp_parent = $temp_parent->parent;
                    }
                    if ($category && $temp_parent->id != $category) {
                        continue;
                    }
                    $products[] = $temp_prod;
                }
            }
        }
        $page_count = ceil(count(array_values($products)) / Yii::$app->params['pageSize']);
        if (Yii::$app->request->get('page') > $page_count) {
            return $this->redirect(['site/error', 'message' => 'Not Found', 404]);
        }
        $page_offset = !empty(Yii::$app->request->get('page')) ? ((Yii::$app->request->get('page') - 1) * Yii::$app->params['pageSize']) : 0;
        if ($page_offset < 0) return $this->redirect(['site/error', 'message' => 'Not Found', 404]);
        $products_slice = array_slice(array_values($products), $page_offset, Yii::$app->params['pageSize']);

        ksort($all_cats);
        return $this->asJson([
            'data' => [
                'products' => AnnounceList::transform(array_values($products_slice), $currency),
                'filter_categories' => CategoryList::transform($all_cats),
            ],
            'meta' => MetaData::transform(new Pagination(['totalCount' => count(array_values($products)), 'pageSize' => Yii::$app->params['pageSize']])),
        ]);
    }

    public function actionAdd()
    {
        $id = Yii::$app->request->post('id', null);
        $user_id = Yii::$app->user->identity->id;
        if ($id) {
            $fav = UserFavorite::findOne(['product_id' => $id, 'user_id' => $user_id]);
            if ($fav) {
                $fav->delete();
                return $this->asJson(['added' => false]);
            } else {
                $fav = new UserFavorite();
                $fav->product_id = $id;
                $fav->user_id = $user_id;
                $fav->save();
                return $this->asJson(['added' => true]);
            }
        }
        return $this->redirect(['site/error', 'message' => 'Invalid ID', 'code' => 422]);
    }
}
