<?php

namespace api\controllers;

use api\models\AnswerForm;
use api\transformers\AnswerList;
use api\transformers\ForumList;
use api\transformers\MetaData;
use common\components\SmsService;
use common\models\Answer;
use common\models\Question;
use common\models\User;
use api\models\QuestionForm;
use Yii;
use yii\data\Pagination;
use yii\filters\auth\HttpBasicAuth;

class ForumController extends \yii\web\Controller
{

    public $enableCsrfValidation = false;

    public function beforeAction($action)
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        $smsService = new SmsService();
        return [
            'authenticator' => [
                'class' => HttpBasicAuth::className(),
                'auth' => function ($username, $password) use ($smsService) {
                    if($smsService->isUzPhone($smsService->clearPhone($username))) {
                        $username = $smsService->clearPhone($username);
                    }
                    $user = User::findByUsername($username);
                    if (!$user) return null;
                    $check = $user->validatePassword($password);
                    return $check? $user: null;
                },
                'only' => ['delete', 'add-question', 'answer', 'answerdelete']
            ]
//            'verbs' => [
//                'class' => VerbFilter::className(),
//                'actions' => [
//                    'purchase-delete' => ['post'],
//                ],
//            ],
        ];
    }

    public function actionQuestions()
    {
        $q = Yii::$app->request->get('q', '');

        $query = Question::find()->orderBy('`id` DESC');
        if ($q) {
            $query->where(['like', 'question' , $q]);
        }
        $countQuery = clone $query;
        $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 20]);
        $pages->validatePage = false;
        $questions = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        return $this->asJson([
            'data' => ForumList::transform($questions),
            'meta' => MetaData::transform($pages),
        ]);
    }
    public function actionAnswers($id)
    {
        $theme = Question::findOne($id);
        if (!$theme) return $this->redirect(['site/error', 'message' => 'Not Found', 'code' => 404]);

        $query = Answer::find()->where(['question_id' => $theme->id])->orderBy('`id` ASC');
        $countQuery = clone $query;
        $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 20]);
        $answers = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();

        $head = Yii::$app->request->headers;
        $auth = $head->get('authorization');
        $user = null;
        if(isset($auth)) {
            $auth = str_replace('Basic ', '', $auth);
            $auth = base64_decode($auth);
            $auth = explode(':', $auth);
            if(isset($auth[0])) {
                $user = User::findByUsername($auth[0]);
            }
        }



        if (($user) && ($theme->user_id == $user->id)) {
            Answer::updateAll(['is_read' => 1], ['question_id' => $theme->id]);
        }

        return $this->asJson([
            'data' => [
                'question' => ForumList::transform([$theme]),
                'answers' => AnswerList::transform($answers),
            ],
            'meta' => MetaData::transform($pages),
        ]);
    }

    public function actionDelete($id)
    {
        $item = Question::findOne(['id' => $id, 'user_id' => Yii::$app->user->identity->id]);
        if (empty($item)) return $this->redirect(['site/error', 'message' => 'Not Found', 'code' => 404]);
        $item->delete();
    }

    public function actionAddQuestion()
    {
        $model = new QuestionForm();
        $model->question = Yii::$app->request->post('question', '');
        if (!$model->validate()) {
            Yii::$app->getResponse()->setStatusCode(422);
            return $this->asJson($model->errors);
        }
        if ($question = $model->addQuestion()) {
            return $this->asJson([
                'data' => ForumList::transform([$question])
            ]);
        }
    }




    public function actionAnswer($id)
    {
        $theme = Question::findOne($id);
        if (!$theme) return $this->redirect(['site/error', 'message' => 'Not Found', 'code' => 404]);

        $model = new AnswerForm();
        $model->answer = Yii::$app->request->post('answer', '');
        if (!$model->validate()) {
            Yii::$app->getResponse()->setStatusCode(422);
            return $this->asJson($model->errors);
        }
        if ($answers = $model->addAnswer($id)) {
            return $this->asJson([
                'data' => AnswerList::transform([$answers])
            ]);
        }
    }


    public function actionAnswerdelete($id)
    {
        $item = Answer::findOne(['id' => $id, 'user_id' => Yii::$app->user->identity->id]);
        if (empty($item)) return $this->redirect(['site/error', 'message' => 'Not Found', 'code' => 404]);
        $item->delete();
    }
}
